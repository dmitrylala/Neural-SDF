BUILD_DIR=build-release
BUILD_TYPE=Release
KSLICER_CFG=kslicer_cfg.txt


help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

clean: ## Clean autogenerated files
	@echo "=== Cleaning build artifacts and tmp files ===="
	rm -rf dist outputs
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	find . | grep -E ".coverage*" | xargs rm -rf
	rm -rf $(BUILD_DIR) \
		ray_marcher/include ray_marcher/shaders_generated ray_marcher/*generated* \
		nn/include nn/shaders_generated nn/*generated*

build_cpu: ## Configure and build for CPU
	@echo "=== Building for CPU ===="
	cmake -B $(BUILD_DIR) -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
	cmake --build $(BUILD_DIR) --target train render -j8

run_kslicer: ## Generate Vulkan code with kslicer
	@echo "=== Running kslicer ===="
	bash scripts/run_kslicer.sh $(KSLICER_CFG)
	cd nn/shaders_generated/ && bash build.sh && cd ../..
	cd ray_marcher/shaders_generated/ && bash build.sh && cd ../..

build_gpu: run_kslicer ## Configure and build for GPU
	@echo "=== Building for GPU ===="
	cmake -B $(BUILD_DIR) -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) -DUSE_VULKAN=ON
	cmake --build $(BUILD_DIR) --target train render -j8

train: ## Run train
	@echo "=== Running train ===="
	./$(BUILD_DIR)/bin/train \
		--n_hidden 2 \
		--hidden_size 64 \
		--batch_size 40 \
		--test_points data/sdf1_test.bin \
		--weights data/sdf1_weights.bin

render: ## Run render
	@echo "=== Running render ===="
	./$(BUILD_DIR)/bin/render
